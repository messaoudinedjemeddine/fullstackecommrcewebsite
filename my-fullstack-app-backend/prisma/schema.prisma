// prisma/schema.prisma
// This file defines your complete e-commerce database schema using Prisma.

generator client {
  provider = "prisma-client-js" // Specifies the client generator for JavaScript/TypeScript
}

datasource db {
  provider = "postgresql"       // Database provider is PostgreSQL
  url      = env("DATABASE_URL") // Connection URL read from the .env file
}

// Enums for defined roles and statuses
enum Role {
  SUPERADMIN
  CALLCENTER
  DELIVERY
  CUSTOMER
}

enum DeliveryType {
  HOME
  DESK
}

enum CallCenterStatus {
  NEW         // Order just placed
  CONFIRMED   // Confirmed by call center
  CANCELED    // Canceled by call center
  NO_RESPONSE // Call center could not reach client
}

enum DeliveryStatus {
  NOT_READY // Order not yet ready for delivery
  READY     // Order packed, ready for dispatch
  IN_TRANSIT // Order is out for delivery
  DONE      // Order successfully delivered
}

// üßë‚Äçüíº User Model
model User {
  id        Int      @id @default(autoincrement()) // Primary key, auto-incrementing integer
  name      String
  email     String   @unique                       // Unique email address
  password  String                                // Hashed password
  role      Role     @default(CUSTOMER)          // Role of the user, defaults to CUSTOMER
  createdAt DateTime @default(now())               // Timestamp of creation

  orders Order[] // Relation to Order model (one-to-many: one user can have many orders)
}

// üõçÔ∏è Product Model
model Product {
  id          Int            @id @default(autoincrement()) // Primary key, auto-incrementing integer
  name        String
  reference   String         @unique                      // Unique SKU/stock reference
  description String?                                     // Optional description
  price       Float                                       // Current price
  oldPrice    Float?                                      // Optional previous price for sales
  isSale      Boolean        @default(false)             // Flag to indicate if product is on sale
  sizes       String[]       @default([])                // List of available sizes as a string array
  stock       Int                                         // Quantity in stock
  categoryId  Int                                         // Foreign key to Category
  createdAt   DateTime       @default(now())             // Timestamp of creation, used for "new arrivals"

  category    Category       @relation(fields: [categoryId], references: [id]) // Relation to Category model
  images      ProductImage[]                                                  // Relation to ProductImage model (one-to-many: one product can have many images)
  orderItems  OrderItem[]                                                     // Relation to OrderItem (many-to-many through OrderItem)
}

// üñºÔ∏è ProductImage Model
model ProductImage {
  id        Int      @id @default(autoincrement()) // Primary key, auto-incrementing integer
  productId Int                                   // Foreign key to Product
  color     String?                               // Optional color name for this image
  imagePath String                                // URL/path to the image

  product Product @relation(fields: [productId], references: [id]) // Relation to Product model
}

// üóÇÔ∏è Category Model
model Category {
  id       Int       @id @default(autoincrement()) // Primary key, auto-incrementing integer
  name     String    @unique                      // Unique category name

  products Product[] // Relation to Product model (one-to-many: one category can have many products)
}

// üì¶ Order Model
model Order {
  id                Int              @id @default(autoincrement()) // Primary key, auto-incrementing integer
  userId            Int?                                          // Foreign key to User (nullable, for orders without login)
  total             Float                                         // Total amount of the order
  createdAt         DateTime         @default(now())              // Order date
  deliveryType      DeliveryType                                  // HOME or DESK delivery
  deliveryCityId    Int                                           // Foreign key to City (Wilaya)
  deliveryDeskId    Int?                                          // Foreign key to DeliveryDesk (nullable, only for DESK delivery)
  address           String?                                       // Required for HOME delivery, optional for DESK
  clientNote        String?                                       // Optional note from client
  callCenterStatus  CallCenterStatus @default(NEW)               // Status updated by call center
  deliveryStatus    DeliveryStatus   @default(NOT_READY)          // Status updated by delivery agent

  user          User?          @relation(fields: [userId], references: [id]) // Relation to User (optional)
  city          City           @relation(fields: [deliveryCityId], references: [id]) // Relation to City
  deliveryDesk  DeliveryDesk?  @relation(fields: [deliveryDeskId], references: [id]) // Relation to DeliveryDesk (optional)
  orderItems    OrderItem[]                                                    // Relation to OrderItem (one-to-many: one order can have many items)
}

// üßæ OrderItem Model
model OrderItem {
  id        Int     @id @default(autoincrement()) // Primary key, auto-incrementing integer
  orderId   Int                                  // Foreign key to Order
  productId Int                                  // Foreign key to Product
  quantity  Int                                  // Quantity ordered
  size      String                               // Size chosen for this item
  price     Float                                // Price at the time of order (unit price)

  order   Order   @relation(fields: [orderId], references: [id])   // Relation to Order
  product Product @relation(fields: [productId], references: [id]) // Relation to Product
}

// üéüÔ∏è Coupon Model
model Coupon {
  id          Int      @id @default(autoincrement()) // Primary key, auto-incrementing integer
  code        String   @unique                      // Unique coupon code
  discountPercent Int                               // Percentage off (e.g., 10 for 10%)
  active      Boolean  @default(true)              // Whether the coupon is active
  expiryDate  DateTime?                             // Optional expiry date
}

// üèôÔ∏è City (Wilaya) Model
model City {
  id            Int            @id @default(autoincrement()) // Primary key, auto-incrementing integer
  name          String         @unique                      // Wilaya name (e.g., "Algiers", "Oran")
  homeFee       Float                                       // Fixed home delivery price for this wilaya

  deliveryDesks DeliveryDesk[] // Relation to DeliveryDesk (one-to-many: one city can have many delivery desks)
  orders        Order[]        // Relation to Order (one-to-many: many orders can belong to one city)
}

// üè¢ DeliveryDesk Model
model DeliveryDesk {
  id      Int      @id @default(autoincrement()) // Primary key, auto-incrementing integer
  cityId  Int                                   // Foreign key to City
  name    String                                // Name of the delivery desk (e.g., "Central Desk", "Bab Ezzouar Desk")
  deskFee Float                                 // Fee for desk delivery

  city   City    @relation(fields: [cityId], references: [id]) // Relation to City
  orders Order[] // Relation to Order (one-to-many: many orders can belong to one delivery desk)
}